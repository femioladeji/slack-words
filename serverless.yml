org: femioladeji
app: slack-wordsgame
service: slack-wordsgame 
plugins:
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

resources:
  Resources:
    slackAuth:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:SLACK_AUTH_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    gamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:DYNAMO_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    gameQueue:
      Type: AWS::SQS::Queue
      Properties: 
        QueueName: ${env:SQS_QUEUE_NAME}
        DelaySeconds: 60
        MessageRetentionPeriod: 120

provider:
  name: aws
  runtime: nodejs16.x
  region: us-west-2
  versionFunctions: false
  iamRoleStatements: # permissions for all of your functions can be set here
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: ${env:DYNAMO_DB}
    - Effect: Allow
      Action: # Gives permission to DynamoDB tables in a specific region
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: ${env:SLACK_AUTH_DYNAMO_DB}
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: ${env:LAMBDA_ARN}
    - Effect: Allow
      Action:
        - sqs:SendMessage
        - sqs:ReceiveMessage
        - sqs:DeleteMessage
        - sqs:GetQueueAttributes
      Resource: ${env:SQS_QUEUE_ARN}

functions:
  game:
    handler: game.start
    name: start_game
    timeout: 5
    events:
      - http:
          path: game
          method: post
  end:
    handler: game.end
    name: end_game
    timeout: 20
    events:
      - sqs: ${env:SQS_QUEUE_ARN}

  slack-auth:
    handler: slack.auth
    name: slack-auth
    timeout: 10
    events:
      - http:
          path: slack-auth
          method: post
          cors: true

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true